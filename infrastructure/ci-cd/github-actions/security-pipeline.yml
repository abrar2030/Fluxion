name: Fluxion Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Security and compliance checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Secret scanning
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    # Static Application Security Testing (SAST)
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

    # Dependency vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --fail-on=all

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

    # Infrastructure as Code security scanning
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,dockerfile,secrets
        output_format: sarif
        output_file_path: reports/results.sarif
        download_external_modules: true
        quiet: true
        soft_fail: false

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/results.sarif

    # Container security scanning
    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # License compliance scanning
    - name: FOSSA Scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        run-tests: true

  # Compliance validation
  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install compliance tools
      run: |
        pip install bandit safety semgrep
        npm install -g audit-ci

    # Python security linting
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    # Python dependency security check
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    # Multi-language security analysis
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    # Node.js dependency audit
    - name: Run npm audit
      run: |
        cd frontend && npm ci
        audit-ci --config audit-ci.json

    # Financial compliance checks
    - name: Financial Compliance Validation
      run: |
        python3 infrastructure/ci-cd/scripts/compliance-validator.py \
          --framework financial \
          --output compliance-report.json

    - name: Upload compliance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          compliance-report.json

  # Infrastructure validation
  infrastructure-test:
    name: Infrastructure Testing
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive

    - name: Terraform Validation
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
        terraform validate

    - name: Terraform Plan (Dry Run)
      run: |
        cd infrastructure/terraform
        terraform plan -out=tfplan

    - name: Terraform Security Scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: infrastructure/terraform

    - name: Kubernetes Manifest Validation
      run: |
        cd infrastructure/kubernetes
        for file in $(find . -name "*.yaml" -o -name "*.yml"); do
          kubectl --dry-run=client apply -f $file
        done

    - name: Helm Chart Linting
      run: |
        helm lint infrastructure/kubernetes/charts/* || true

    - name: Ansible Playbook Syntax Check
      run: |
        cd infrastructure/ansible
        ansible-playbook --syntax-check playbooks/main.yml

  # Container build and security
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Build with security best practices
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

    # Container image security scanning
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        fail-build: true
        severity-cutoff: high

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

    # Container configuration security
    - name: Run Dockle
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          goodwithtech/dockle:latest \
          --exit-code 1 \
          --exit-level WARN \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Deployment readiness
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-scan, compliance-check, infrastructure-test, container-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install deployment tools
      run: |
        pip install kubernetes ansible boto3 hvac

    - name: Validate deployment configuration
      run: |
        python3 infrastructure/ci-cd/scripts/deployment-validator.py \
          --environment production \
          --validate-secrets \
          --validate-resources \
          --output deployment-readiness.json

    - name: Generate deployment manifest
      run: |
        python3 infrastructure/ci-cd/scripts/manifest-generator.py \
          --environment production \
          --image-tag ${{ github.sha }} \
          --output deployment-manifest.yaml

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          deployment-readiness.json
          deployment-manifest.yaml

    # Notify deployment readiness
    - name: Notify deployment readiness
      if: success()
      run: |
        echo "âœ… Deployment readiness check passed"
        echo "ðŸš€ Ready for production deployment"
        echo "ðŸ“¦ Container image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

  # Security notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, compliance-check]
    if: failure()
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          ðŸš¨ Security pipeline failed for ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please review the security scan results and address any critical issues.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

