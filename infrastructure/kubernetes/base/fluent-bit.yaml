apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: logging
  labels:
    app: fluent-bit
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On

    [INPUT]
        Name              tail
        Path              /var/log/containers/*.log
        multiline.parser  docker, cri
        Tag               kube.*
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Refresh_Interval  10

    [INPUT]
        Name            systemd
        Tag             host.*
        Systemd_Filter  _SYSTEMD_UNIT=kubelet.service
        Systemd_Filter  _SYSTEMD_UNIT=docker.service
        Read_From_Tail  On

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On

    [FILTER]
        Name    grep
        Match   kube.*
        Regex   kubernetes.namespace_name ^({{ .Values.namespace | default "default" }}|kube-system|logging|monitoring)$

    [FILTER]
        Name    modify
        Match   kube.*
        Add     cluster_name {{ .Values.cluster.name | default "fluxion-cluster" }}
        Add     environment {{ .Values.environment | default "production" }}

    # Security and compliance filters
    [FILTER]
        Name    lua
        Match   kube.*
        Script  /fluent-bit/scripts/security_filter.lua
        Call    add_security_metadata

    [FILTER]
        Name    lua
        Match   kube.*
        Script  /fluent-bit/scripts/compliance_filter.lua
        Call    add_compliance_metadata

    # Redact sensitive information
    [FILTER]
        Name    modify
        Match   kube.*
        Condition Key_value_matches log password.*
        Set     log [REDACTED - PASSWORD]

    [FILTER]
        Name    modify
        Match   kube.*
        Condition Key_value_matches log token.*
        Set     log [REDACTED - TOKEN]

    [FILTER]
        Name    modify
        Match   kube.*
        Condition Key_value_matches log secret.*
        Set     log [REDACTED - SECRET]

    [OUTPUT]
        Name            forward
        Match           kube.*
        Host            logstash.logging.svc.cluster.local
        Port            5044
        tls             off
        tls.verify      off

    [OUTPUT]
        Name            forward
        Match           host.*
        Host            logstash.logging.svc.cluster.local
        Port            5044
        tls             off
        tls.verify      off

  parsers.conf: |
    [PARSER]
        Name   apache
        Format regex
        Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   apache2
        Format regex
        Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   apache_error
        Format regex
        Regex  ^\[[^ ]* (?<time>[^\]]*)\] \[(?<level>[^\]]*)\](?: \[pid (?<pid>[^\]]*)\])?( \[client (?<client>[^\]]*)\])? (?<message>.*)$

    [PARSER]
        Name   nginx
        Format regex
        Regex ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   json
        Format json
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

    [PARSER]
        Name    syslog
        Format  regex
        Regex   ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key time
        Time_Format %b %d %H:%M:%S

  security_filter.lua: |
    function add_security_metadata(tag, timestamp, record)
        local new_record = record
        
        -- Add security classification based on namespace
        if record["kubernetes"] and record["kubernetes"]["namespace_name"] then
            local namespace = record["kubernetes"]["namespace_name"]
            if namespace == "{{ .Values.namespace | default "default" }}" then
                new_record["security_classification"] = "financial"
                new_record["compliance_required"] = "true"
                new_record["retention_years"] = "7"
            end
        end
        
        -- Detect security-related logs
        if record["log"] then
            local log_message = string.lower(record["log"])
            if string.match(log_message, "authentication") or 
               string.match(log_message, "authorization") or
               string.match(log_message, "login") or
               string.match(log_message, "logout") or
               string.match(log_message, "access_denied") or
               string.match(log_message, "security") or
               string.match(log_message, "audit") then
                new_record["log_type"] = "security"
                new_record["alert_required"] = "true"
            end
            
            -- Detect error conditions
            if string.match(log_message, "error") or
               string.match(log_message, "exception") or
               string.match(log_message, "fatal") then
                new_record["severity"] = "high"
                new_record["investigation_required"] = "true"
            end
        end
        
        return 1, timestamp, new_record
    end

  compliance_filter.lua: |
    function add_compliance_metadata(tag, timestamp, record)
        local new_record = record
        
        -- Add compliance metadata
        new_record["compliance_framework"] = "financial_services"
        new_record["data_residency"] = "{{ .Values.compliance.dataResidency | default "US" }}"
        new_record["encryption_required"] = "true"
        new_record["audit_trail"] = "enabled"
        
        -- Add timestamp for compliance tracking
        new_record["ingestion_timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        
        -- Mark PII detection
        if record["log"] then
            local log_message = record["log"]
            if string.match(log_message, "%d%d%d%-%d%d%-%d%d%d%d") or  -- SSN pattern
               string.match(log_message, "%d%d%d%d%s%d%d%d%d%s%d%d%d%d%s%d%d%d%d") or  -- Credit card pattern
               string.match(log_message, "[%w%._%+%-]+@[%w%._%+%-]+%.%w+") then  -- Email pattern
                new_record["contains_pii"] = "true"
                new_record["data_classification"] = "sensitive"
                new_record["special_handling"] = "required"
            end
        end
        
        return 1, timestamp, new_record
    end
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: logging
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: "/api/v1/metrics/prometheus"
    spec:
      serviceAccountName: fluent-bit
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - operator: "Exists"
        effect: "NoExecute"
      - operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:2.1.8
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 2020
          name: http
        volumeMounts:
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
        - name: fluent-bit-scripts
          mountPath: /fluent-bit/scripts/
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 2020
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
          items:
          - key: fluent-bit.conf
            path: fluent-bit.conf
          - key: parsers.conf
            path: parsers.conf
      - name: fluent-bit-scripts
        configMap:
          name: fluent-bit-config
          items:
          - key: security_filter.lua
            path: security_filter.lua
          - key: compliance_filter.lua
            path: compliance_filter.lua
      - name: tmp
        emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - pods/logs
  - nodes
  - nodes/proxy
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: logging
---
apiVersion: v1
kind: Service
metadata:
  name: fluent-bit
  namespace: logging
  labels:
    app: fluent-bit
spec:
  selector:
    app: fluent-bit
  ports:
  - port: 2020
    targetPort: 2020
    name: http

